{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Swal from 'sweetalert2';\nlet ListarTorresComponent = class ListarTorresComponent {\n  constructor(torresService, router, toastr, formBuilder, datePipe) {\n    this.torresService = torresService;\n    this.router = router;\n    this.toastr = toastr;\n    this.formBuilder = formBuilder;\n    this.datePipe = datePipe;\n    this.torresFiltradas = [];\n    this.torres = [];\n    this.residencia = '';\n    this.torre = '';\n    this.fecha = null;\n    this.mes = ''; // Nuevo campo para el mes\n    this.año = '';\n    this.estadoMensaje = '';\n    this.filtroForm = this.formBuilder.group({\n      residencia: [''],\n      torre: [''],\n      mes: [''],\n      año: [''],\n      fecha: [''],\n      estadoMensaje: ['']\n    });\n  }\n  ngOnInit() {\n    this.obtenerTorres();\n  }\n  obtenerTorres() {\n    this.torresService.obtenerTorres().subscribe(torres => {\n      this.torres = torres;\n      console.log(torres);\n    }, error => {\n      console.log('Error al obtener las torres:', error);\n    });\n  }\n  editarTorre(torreId) {\n    if (torreId !== null) {\n      console.log(torreId);\n      this.router.navigate(['/editar-torre', torreId]);\n    }\n  }\n  enviarMensaje(torre) {\n    if (!torre) {\n      // Manejar el caso en que torre sea undefined\n      this.toastr.error('La torre seleccionada no es válida.', 'Error');\n      return; // Salir de la función si torre no está definida\n    }\n\n    const nombre = torre.nombrePersona;\n    const fecha = torre.fecha;\n    const nivelInfestacion = torre.nivelInfestacion;\n    const recomendaciones = torre.recomendaciones;\n    const mensaje = `\n    *Certificado fumigación:*\n    ¡Hola ${nombre}! De acuerdo al servicio realizado para el control de plagas el día *${fecha}*, evidenciamos un nivel de infestación: *${nivelInfestacion}*. \n    Recuerda la importancia de seguir con el orden y de fumigar periódicamente. \n  \n    Si el técnico evidenció que no tienes infestación, ten en cuenta que es normal seguir viendo cucarachas y otros animalitos ya que estos serán solo de paso y no se quedarán en tu hogar gracias a las propiedades piretroides del veneno. \n  \n    De lo contrario, si se evidenció infestación, te aconsejamos llamarnos o escribirnos para una nueva fumigación. \n    Recomendaciones: *${recomendaciones}*, si tienes alguna inquietud nos puedes escribir a este número,\n    Recuerda que realizamos servicios para: fincas, apartamentos, locales, bodegas, empresas, oficinas, hospitales, transporte público, etc.\n    Cordialmente: Expres Fumigaciones. ¡Feliz día! ©\n    `;\n    const numeroTelefono = \"+57\" + torre.celular;\n    Swal.fire({\n      title: 'Por favor continua a wpp y verifica que los datos del mensaje esten bien antes de enviarlo',\n      text: 'Se enviará un mensaje de WhatsApp al cliente con la información del servicio, si envia el mensaje su estado cambia a \"enviado\" y no podra reversarlo.',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonText: 'Continuar al wpp 🟢',\n      cancelButtonText: 'Cancelar',\n      customClass: {\n        confirmButton: 'swal2-confirm',\n        cancelButton: 'swal2-cancel'\n      },\n      background: '#ffffff'\n    }).then(result => {\n      if (result.isConfirmed) {\n        if (numeroTelefono) {\n          // Verificar si torre._id es válido\n          if (torre._id) {\n            this.torresService.marcarMensajeEnviado(torre._id).subscribe(() => {\n              // Cambiar el estado de la torre a \"enviado\" aquí\n              // ...\n              const enlaceWhatsApp = `https://wa.me/${numeroTelefono}?text=${encodeURIComponent(String(mensaje))}`;\n              window.open(enlaceWhatsApp, '_blank');\n              location.reload();\n            }, error => {\n              console.log('Error al marcar el mensaje como enviado:', error);\n            });\n          } else {\n            this.toastr.error('No se encontró un ID válido para esta torre.', 'Error');\n          }\n        } else {\n          this.toastr.error('No se encontró un número de teléfono válido para esta torre.', 'Error');\n        }\n      }\n    });\n  }\n  eliminarTorre(torreId) {\n    if (torreId) {\n      Swal.fire({\n        title: '¿Estás seguro?',\n        text: 'Esta acción no se puede deshacer',\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Sí, eliminar',\n        cancelButtonText: 'Cancelar'\n      }).then(result => {\n        if (result.isConfirmed) {\n          // Lógica de eliminación aquí\n          // Llama al servicio para eliminar la torre\n          this.torresService.eliminarTorre(torreId).subscribe(() => {\n            // Eliminación exitosa\n            Swal.fire('Eliminada', 'La torre ha sido eliminada con éxito', 'success');\n            // Actualizar la lista de torres después de eliminar\n            this.obtenerTorres();\n          }, error => {\n            console.log('Error al eliminar la torre:', error);\n          });\n        }\n      });\n    }\n  }\n  formatearFecha(fecha) {\n    if (fecha instanceof Date) {\n      const dia = fecha.getDate().toString().padStart(2, '0');\n      const mes = (fecha.getMonth() + 1).toString().padStart(2, '0');\n      const año = fecha.getFullYear();\n      return `${dia}/${mes}/${año}`;\n    } else {\n      // Si la fecha no es válida, puedes manejarla de alguna manera o devolver un valor predeterminado.\n      return 'Fecha no válida';\n    }\n  }\n  convertirFechaAUTC(fechaISO8601) {\n    // Crear un objeto Date a partir de la cadena de fecha\n    const fecha = new Date(fechaISO8601);\n    // Obtener los componentes de fecha y hora\n    const año = fecha.getUTCFullYear();\n    const mes = (fecha.getUTCMonth() + 1).toString().padStart(2, '0');\n    const dia = fecha.getUTCDate().toString().padStart(2, '0');\n    const horas = fecha.getUTCHours().toString().padStart(2, '0');\n    const minutos = fecha.getUTCMinutes().toString().padStart(2, '0');\n    const segundos = fecha.getUTCSeconds().toString().padStart(2, '0');\n    const milisegundos = fecha.getUTCMilliseconds().toString().padStart(3, '0');\n    // Crear la cadena de fecha en formato ISO 8601 con zona horaria UTC\n    const fechaUTC = `${año}-${mes}-${dia}T${horas}:${minutos}:${segundos}.${milisegundos}Z`;\n    return fechaUTC;\n  }\n  // Ejemplo de uso\n  filtrarTorres() {\n    this.residencia = this.residencia.toLowerCase();\n    this.torre = this.torre.toLowerCase();\n    this.estadoMensaje = this.estadoMensaje.toLowerCase();\n    const fechaUTC = this.convertirFechaAUTC(this.fecha);\n    console.log('Valor de this.fecha:', fechaUTC);\n    // Si no hay fecha ingresada o no es válida, aplicar los filtros sin considerar la fecha\n    this.torresFiltradas = this.torres.filter(torren => {\n      return (!this.residencia || torren.residencia.toLowerCase().includes(this.residencia)) && (!this.torre || torren.nombre.toLowerCase().includes(this.torre)) && (!this.estadoMensaje || torren.estadoMensaje.toLowerCase().includes(this.estadoMensaje));\n    });\n    console.log('Torres filtradas:', this.torresFiltradas);\n  }\n  limpiarFiltros() {\n    // Restablece los valores de los filtros a su estado inicial\n    this.residencia = '';\n    this.torre = '';\n    this.fecha = null;\n    this.estadoMensaje = '';\n    // Vacía el array de torres filtradas para mostrar todas las torres\n    this.torresFiltradas = [];\n  }\n};\nListarTorresComponent = __decorate([Component({\n  selector: 'app-listar-torres',\n  templateUrl: './listar-torres.component.html',\n  styleUrls: ['./listar-torres.component.css']\n})], ListarTorresComponent);\nexport { ListarTorresComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}