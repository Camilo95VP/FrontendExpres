{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductoService = /*#__PURE__*/(() => {\n  class ProductoService {\n    constructor(http) {\n      this.http = http;\n      this.url = 'http://localhost:4000/api/clientes/';\n    }\n    getProductos(searchTerm) {\n      // Si el término de búsqueda no está presente o es una cadena vacía, devuelve todos los productos sin filtrar.\n      if (!searchTerm || searchTerm.trim() === '') {\n        return this.http.get(this.url);\n      }\n      // Si hay un término de búsqueda, agrega el parámetro 'search' a la URL de la solicitud HTTP.\n      // Suponiendo que tu API espera el término de búsqueda como un parámetro 'search' en la URL, puedes hacer algo como esto:\n      return this.http.get(`${this.url}?search=${encodeURIComponent(searchTerm)}`);\n    }\n    eliminarProducto(id) {\n      return this.http.delete(this.url + id);\n    }\n    guardarProducto(producto) {\n      return this.http.post(this.url, producto);\n    }\n    obtenerProducto(id) {\n      return this.http.get(this.url + id);\n    }\n    actualizarProducto(producto) {\n      return this.http.put(`${this.url}${producto._id}`, producto);\n    }\n  }\n  ProductoService.ɵfac = function ProductoService_Factory(t) {\n    return new (t || ProductoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ProductoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductoService,\n    factory: ProductoService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductoService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}